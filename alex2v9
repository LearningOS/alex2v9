#!/usr/bin/env ruby
require_relative 'debug_lines'
infile = ARGV[0]
outfile = ARGV[1]
unless infile && outfile
  puts 'usage: ./alex2v9 infile outfile'
  exit
end

READELF = 'readelf'
OBJDUMP = 'objdump'
LLVM_OBJDUMP = 'llvm-objdump'
begin
  `#{READELF} --help`
  `#{OBJDUMP} --help`
  `#{LLVM_OBJDUMP} --help`
rescue
  puts 'please check your readelf, objdump and llvm-objdump'
  exit
end

elf_header = `#{READELF} -h #{infile}`
section_headers = `#{OBJDUMP} -h #{infile}`
section_content = `#{LLVM_OBJDUMP} -arch=alex -s #{infile}`

# parse entry point
raise 'readelf format error' unless elf_header =~ /Entry point address:\s+0x([0-9a-f]+)$/i
entry_point = $1.to_i(16)

# parse text, bss, data section file offsets and vmas
def parse_section_header(str, section_name)
  return nil unless str =~ /\.#{section_name}\s+([a-f0-9]+)\s+([a-f0-9]+)\s+([a-f0-9]+)\s+([a-f0-9]+)/i
  {
      size: $1.to_i(16),
      vma:  $2.to_i(16),
      lma:  $3.to_i(16),
      file_off: $4.to_i(16)
  }
end
def parse_data_section_header(str)
  return nil unless str =~ /\.(\w+)\s+([a-f0-9]+)\s+([a-f0-9]+)\s+([a-f0-9]+)\s+([a-f0-9]+)/i
  ret = {
      name: $1,
      size: $2.to_i(16),
      vma:  $3.to_i(16),
      lma:  $4.to_i(16),
      file_off: $5.to_i(16)
  }
  ret[:name] =~ /data/ ? ret : nil
end
def parse_data_section_headers(str)
  ret = []
  str.split("\n").each do |line|
    header = parse_data_section_header(line)
    ret << header if header
  end
  ret
end

text = parse_section_header(section_headers, 'text')
raise 'text section headers error' unless text
# rodata = parse_section_header(section_headers, 'rodata')
# bss = parse_section_header(section_headers, 'bss')
# data = parse_section_header(section_headers, 'data')
headers = parse_data_section_headers(section_headers)

# parse section content
def hex_str_to_binary(hexstr)
  raise 'hex string format error' unless hexstr.size % 2 == 0
  ret = ''
  (hexstr.size/2).times do |i|
    ret += [hexstr[(2*i)..(2*i+1)].to_i(16)].pack('C')
  end
  ret
end

def parse_section_content(str, section_name)
  started = false
  content = ''
  str.split("\n").each do |line|
    if line =~ /Contents of section \.(\w+):/
      name = $1
      if name == section_name
        started = true
      elsif started && name != section_name
        break
      end
    end

    if started && line =~ /^ \d+/
      line_data_array = line.split(' ')[1..4]
      line_data_array.reject! { |l| ! (l =~ /^[0-9a-f]+$/i)}
      line_data = line_data_array.join('')
      content += hex_str_to_binary(line_data)
    end
  end
  content
end

def parse_data_sections(str)
  started = false
  current_section = nil
  current_section_start = nil
  data_sections = []
  content = nil
  str.split("\n").each do |line|
    if line =~ /Contents of section \.(\w+):/
      name = $1

      if started
        data_sections << { name: current_section, content: content, start: current_section_start }
        started = false
        current_section = nil
        current_section_start = nil
      end

      if name =~ /data/
        started = true
        content = ''
        current_section = name
      end
    end

    if started && line =~ /^ \d+/
      addr, *line_data_array = line.split(' ')[0..4]
      current_section_start = addr.to_i(16) unless current_section_start
      line_data_array.reject! { |l| ! (l =~ /^[0-9a-f]+$/i)}
      line_data = line_data_array.join('')
      content += hex_str_to_binary(line_data)
    end
  end
  data_sections
end

#puts section_content

text[:content] = parse_section_content(section_content, 'text')
sections = parse_data_sections(section_content)

sections.map! do |section|
  name = section[:name]
  start = section[:start]
  header = headers.find { |x| x[:name] == name && x[:vma] == start }
  section.merge(header) if header
end

def gen_v9_header(entry_point, data_offset)
  [0xC0DEF00D].pack('L') +      # magic
    [0].pack('L') +             # bss
    [entry_point].pack('L') +   # text
    [data_offset].pack('L')     # data
end

def gen_v9_extended_header(filename)
  [0xFF2017FF].pack('L') +
      filename + [0].pack('C')
end

def fill_section(file_data, section)
  if section[:content]
    file_data[section[:vma], section[:size]] =
      section[:content]
  end
end

@dbg_lines = parse_debug_lines(infile)
main_file = @dbg_lines.keys.first
extended_header = gen_v9_extended_header(main_file)

last_section = (sections.sort_by { |section| section[:vma] }).last
file_size = last_section[:vma] + last_section[:size]

file_data = ([0]*file_size).pack('C*')

header = gen_v9_header(entry_point, text[:vma]+text[:size])

# 假设text是第一个段, 把附加数据放在text段之前这段不使用的空间

file_data[0, header.size] = header
file_data[header.size, extended_header.size] = extended_header
fill_section(file_data, text)
sections.each do |section|
  if section[:name] =~ /bss/
    file_data[section[:vma], section[:size]] = ([0] * section[:size]).pack('C*')
  else
    fill_section(file_data, section)
  end
end

File.write(outfile, file_data)
