#!/usr/bin/env ruby
require './debug_lines'
require 'json'
require 'pp'
if ARGV.size != 2
  puts 'usage ./dwarf2v9 infile outfile'
  exit
end

OBJDUMP = 'objdump'
READELF = 'readelf'

begin
  `#{OBJDUMP} --help`
rescue
  puts 'please install objdump and readelf'
  exit
end

PTR_SIZE = 4

infile, outfile = ARGV

@dbg_lines = parse_debug_lines(infile)

#########################################
## DWARF info
dwarf = `#{OBJDUMP} --dwarf=info #{infile}`
lines = dwarf.split("\n")

items = []
current_item = nil
lines.each do |line|
  case line
    when /<([0-9a-f]+)><([0-9a-f]+)>:\s+Abbrev Number:\s+([0-9a-f]+)(?:\s+\(([^(]+)\))?/i
      items << current_item if current_item
      depth, offset, abbr, type = $1.to_i(16), $2.to_i(16), $3.to_i(16), $4
      current_item = { type: type, depth: depth, offset: offset, abbr: abbr, children: [] }
    when /<([0-9a-f]+)>\s+([\w_]+)\s*:(.*)$/i
      offset, key, value = $1.to_i(16), $2, $3
      current_item[key] = { offset: offset, value: value }
    else
  end
end

# create dwarf tree with a stack
root = { type: 'root', depth: -1, offset: 0, abbr: 0, children: [], parent: nil }
stack = [root]
items.each do |item|
  if stack.last[:depth] >= item[:depth]
    stack.slice!((stack.size-(stack.last[:depth] - item[:depth] + 1))...stack.size)
  end
  parent = stack.last
  item[:parent] = parent
  parent[:children] << item
  stack.push item
end

# traverse dwarf tree to get particular information
@types = {}
@functions = {}
@variables = {}

def parse_type_offset(off)
  if off && off.key?(:value)
    off[:value].strip[1...-1].to_i(16)
  else
    -1
  end
end

def parse_simple_type(t, attr = nil)
  if attr == :typedef
    {
        type:   :typedef,
        name:   parse_dwarf_string(t['DW_AT_name'][:value]),
        rawType: DwarfType.new(@types, t['DW_AT_type'], :typedef)
    }
  elsif attr == nil
    {
        type:   :type,
        name:   DwarfType.new(@types, t['DW_AT_type'])
    }
  else
    {
        type:   attr,
        name:   DwarfType.new(@types, t['DW_AT_type'], attr)
    }
  end

end
def parse_variable(item)
  {
      name: parse_dwarf_string(item['DW_AT_name'][:value]),
      typeOffset: parse_type_offset(item['DW_AT_type']),
      location: parse_location(item['DW_AT_location'][:value])
  }
end

def parse_location(loc)
  if loc.strip.split("\t")[-1][1...-1] =~ /([\w_]+):\s+(\d+)/
    {
        base: $1,
        offset: $2.to_i
    }
  end
end
def parse_dwarf_string(value)
  if value.strip =~ /\(indirect string[^)]+\):(.*)$/
    $1.strip
  end
end

def parse_struct_def_in_types(item)
  item[:children].each do |member|
    if member[:type] == 'DW_TAG_structure_type'
      parse_struct_def_in_types(member)
    end
  end
  @types[item[:offset]] = item
end

class DwarfType
  attr_accessor :name
  def initialize(types, at_type, add = nil)
    @at_type = at_type
    @types = types
    @add = add
  end
  def to_s
    unless @str
      @str = ''
      if @add == :typedef
        @str += 'typedef '
      end
      if @add == :const
        @str += 'const '
      end
      if @at_type
        t = @types[@at_type[:value].strip[1...-1].to_i(16)]
        if t
          @str += t[:name].to_s
        else
          @str += @at_type[:value]
        end
      else
        @str += 'void'
      end
      if @add == :pointer
        @str += '*'
      end
    end
    @str
  end
end

root[:children].each do |compile_unit|
  compile_unit[:children].each do |item|
    case item[:type]
      when 'DW_TAG_const_type'
        @types[item[:offset]] = item #parse_simple_type(item, :const)
      when 'DW_TAG_pointer_type'
        @types[item[:offset]] = item #parse_simple_type(item, :pointer)
      when 'DW_TAG_typedef'
        @types[item[:offset]] = item #parse_simple_type(item, :typedef)
      when 'DW_TAG_base_type'
        # t =  {
        #     type:     :basic,
        #     name:     parse_dwarf_string(item['DW_AT_name'][:value]),
        #     encoding: item['DW_AT_encoding'][:value].strip.split("\t").last[1...-1],
        #     size:     item['DW_AT_byte_size'][:value].to_i(16)
        # }
        @types[item[:offset]] = item
      when 'DW_TAG_array_type'
        @types[item[:offset]] = item #parse_simple_type(item, :array)
      when 'DW_TAG_structure_type'
        parse_struct_def_in_types(item)
      when 'DW_TAG_subroutine_type'
        @types[item[:offset]] = item
      when 'DW_TAG_variable'
        v = parse_variable(item)
        @variables[v[:name]] = v
      when 'DW_TAG_subprogram'
        func = {}
        name = parse_dwarf_string item['DW_AT_name'][:value]
        raise 'no name' unless name
        func[:name] = name
        func[:startAddress]  = item['DW_AT_low_pc'][:value].to_i(16)
        func[:size]           = item['DW_AT_high_pc'][:value].to_i(16)
        func[:returnType]    = parse_type_offset(item['DW_AT_type'])

        func[:arguments] = []
        func[:localVariables] = []
        func[:lexicalBlocks] = []

        item[:children].each do |variable|
          case variable[:type]
            when 'DW_TAG_formal_parameter'
              func[:arguments] << parse_variable(variable)
            when 'DW_TAG_variable'
              func[:localVariables] << parse_variable(variable)
            when 'DW_TAG_unspecified_parameters'
              # ignore
            when 'DW_TAG_lexical_block'
              blk = {
                  startAddress: variable['DW_AT_low_pc'][:value].to_i(16),
                  size: variable['DW_AT_high_pc'][:value].to_i(16),
                  variables: []
              }
              variable[:children].each do |c|
                case c[:type]
                  when 'DW_TAG_variable'
                    blk[:variables] << parse_variable(c)
                  else
                end
              end
              func[:lexicalBlocks] << blk
            else
          end
        end
        #  pp func
        @functions[func[:name]] = func
      else
        # puts item
    end
  end
end

if outfile == '-'
  out_io = STDOUT
else
  out_io = open(outfile, 'w')
end

def get_base_type(str)
  {
      name: str.gsub(/long /, '').gsub(/unsigned /, 'u'),
      size: case str
              when /char/
                1
              when /short/
                2
              when /int/
                4
              else
                -1
            end
  }
end

def get_struct_size(st)
  size, _ = get_struct_members_def(st)
  size
end

def get_t(t)
  case t[:type]
    when 'DW_TAG_base_type'
      get_base_type(parse_dwarf_string(t['DW_AT_name'][:value]))
    when 'DW_TAG_const_type'
      if t['DW_AT_type'][:value] =~ /0x([0-9a-f]+)/
        get_t(@types[$1.to_i(16)])
      else
        raise RuntimeError
      end
    when 'DW_TAG_pointer_type'
      if t['DW_AT_type']
        if t['DW_AT_type'][:value] =~ /0x([0-9a-f]+)/
          {
              name: 'ptr(' + get_t(@types[$1.to_i(16)])[:name] + ')',
              size: PTR_SIZE
          }
        else
          raise RuntimeError
        end
      else
        {
            name: 'ptr(void)',
            size: PTR_SIZE
        }
      end
    when 'DW_TAG_array_type'
      if t['DW_AT_type'][:value] =~ /0x([0-9a-f]+)/
        child = t[:children].first
        if child[:type] == 'DW_TAG_subrange_type'
          size = child['DW_AT_count'][:value].strip.to_i
          inner_t = @types[$1.to_i(16)]
          th = get_t(inner_t)
          {
              name: "array(#{size}|#{th[:size]}(#{th[:name]}))",
              size: size * th[:size]
          }
        else
          raise RuntimeError, 'DWARF array does\'nt have a count field'
        end
      else
        raise RuntimeError
      end
    when 'DW_TAG_typedef'
      if t['DW_AT_type'][:value] =~ /0x([0-9a-f]+)/
        th = get_t(@types[$1.to_i(16)])
        {
            name: th[:name],
            size: th[:size]
        }
      else
        raise RuntimeError
      end
    when 'DW_TAG_structure_type'
      # if named struct print name
      # else expand struct
      if t['DW_AT_name']
        {
            name: "struct<#{parse_dwarf_string(t['DW_AT_name'][:value])}>",
            size: get_struct_size(t)
        }
      else
        size, name = get_struct_members_def(t)
        {
            name: name,
            size: size
        }
      end

    when 'DW_TAG_subroutine_type'
      { name: 'fun', size: 4 }
    else
      raise RuntimeError, 'unknown dwarf type'
  end
end

def get_v9_type_str(off)
  if off == nil
    raise RuntimeError, 'get_v9_type_str parameter error'
  end
  t = @types[off]
  return 'void' unless t
  "(#{get_t(t)[:name]})"
end

def get_struct_members_def(struct)
  members_str = ''
  last_member_size = 0
  last_member_off = 0
  struct[:children].each do |member|
    if member[:type] == 'DW_TAG_member'
      offset = member['DW_AT_data_member_location'][:value].strip.to_i
      last_member_off = offset

      # named struct
      if member['DW_AT_name']
        name = parse_dwarf_string member['DW_AT_name'][:value]

        if member['DW_AT_type'][:value] =~ /0x([0-9a-f]+)/i
          type = get_t(@types[$1.to_i(16)])
          members_str += "(#{name}:+#{offset}:#{type[:name]})"
          last_member_size = type[:size]
        else
          raise RuntimeError, 'dwarf type format error'
        end
      else
        # unnamed struct
        if member['DW_AT_type'][:value] =~ /0x([0-9a-f]+)/i
          type_size, mstr = get_struct_members_def(@types[$1.to_i(16)])
          members_str += "(??:+#{offset}:#{mstr})"
          last_member_size = type_size
        else
          raise RuntimeError, 'dwarf type format error'
        end
      end
    end
  end
  [last_member_size + last_member_off, members_str]
end


out_io.puts "= #{infile}"

# global variables
out_io.puts '# global variables'
@variables.each do |name, val|
  out_io.puts "g #{name} data +#{val[:location][:offset]} #{get_v9_type_str(val[:typeOffset])}"
end
out_io.puts

# functions
out_io.puts '# functions'
@functions.each do |name, fn|
  out_io.puts "< 0x#{fn[:startAddress].to_s(16)}"
  fn[:arguments].each_with_index do |arg, i|
    off = - 4 - 4*5 - 4 * i
    out_io.puts "l #{arg[:name]} stk #{off} #{get_v9_type_str(arg[:typeOffset])}"
  end
  fn[:localVariables].each_with_index do |local_var, i|
    off = - 4 - 4*5 - fn[:arguments].size * 4 - 4 * i
    out_io.puts "l #{local_var[:name]} stk #{off} #{get_v9_type_str(local_var[:typeOffset])}"
  end
  @dbg_lines.each do |file, dblines|
    dblines.each do |l, pc|
      if fn[:startAddress] <= pc && pc < fn[:startAddress] + fn[:size]
        out_io.puts "i 0x#{(pc - fn[:startAddress]).to_s(16)} #{file} #{l}"
      end
    end
  end
  out_io.puts
end

# structs
out_io.puts '# structures'
@types.each do |id, type|
  # print named structs
  if type[:type] == 'DW_TAG_structure_type' && type['DW_AT_name']
    size, def_str = get_struct_members_def(type)
    out_io.puts "d struct #{parse_dwarf_string(type['DW_AT_name'][:value])} (#{size}|#{def_str})"
  end
  # out_io.puts "#{name}, #{type}"
end
out_io.puts

# .data and .bss start address
elf_header = `#{OBJDUMP} -h #{infile}`
def parse_section_header(str, section_name)
  return nil unless str =~ /\.#{section_name}\s+([a-f0-9]+)\s+([a-f0-9]+)\s+([a-f0-9]+)\s+([a-f0-9]+)/i
  {
      size: $1.to_i(16),
      vma:  $2.to_i(16),
      lma:  $3.to_i(16),
      file_off: $4.to_i(16)
  }
end
bss = parse_section_header(elf_header, 'bss')
data = parse_section_header(elf_header, 'data')


out_io.puts ".data 0x#{data[:vma].to_s(16)}"
out_io.puts ".bss 0x#{bss[:vma].to_s(16)}"